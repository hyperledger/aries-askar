name: "Aries-Askar"

"on":
  push:
    branches: "**"
  pull_request:
    branches: [main]
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      publish-wrappers:
        description: 'Publish Wrappers to Registries'
        required: true
        default: false
        type: boolean        

jobs:
  check:
    name: Run checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-11, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.56
          override: true
          components: clippy, rustfmt

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v1
        with:
          sharedKey: check
          cache-on-failure: true

      - name: Cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --workspace

      - name: Debug build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets

      - if: "runner.os == 'Linux'"
        name: Start postgres (Linux)
        run: |
          sudo systemctl start postgresql.service
          pg_isready
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres'"
          echo "POSTGRES_URL=postgres://postgres:postgres@localhost:5432/test-db" >> $GITHUB_ENV
          echo "TEST_FEATURES=pg_test" >> $GITHUB_ENV

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --features "${{ env.TEST_FEATURES }}" -- --nocapture --test-threads 1 --skip contention
        env:
          RUST_BACKTRACE: full
          # RUST_LOG: debug

      - name: Test askar-crypto no_std
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path ./askar-crypto/Cargo.toml --no-default-features

      - name: Test askar-wql
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path ./askar-wql/Cargo.toml

      - name: Test askar-bbs no_std
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path ./askar-bbs/Cargo.toml --no-default-features

  build-manylinux:
    name: Build (manylinux)
    needs: [check]

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            lib: libaries_askar.so
            container: andrewwhitehead/manylinux2014-base

    container: ${{ matrix.container }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.56
          override: true

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v1
        with:
          sharedKey: check

      - name: Build library
        env:
          BUILD_TARGET: ${{ matrix.target }}
          # LIBSQLITE3_FLAGS: SQLITE_DEBUG SQLITE_MEMDEBUG
        run: sh ./build.sh

      - name: Upload library artifacts
        uses: actions/upload-artifact@v2
        with:
          name: library-${{ runner.os }}
          path: target/release/${{ matrix.lib }}

  build-native:
    name: Build (native)
    needs: [check]

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-11
            lib: libaries_askar.dylib
            target: apple-darwin # creates a universal library
            toolchain: nightly-2021-10-21 #  beta required for aarch64-apple-darwin target
          - os: windows-latest
            lib: aries_askar.dll
            toolchain: 1.56

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v1
        with:
          sharedKey: check

      - name: Build library
        env:
          BUILD_TARGET: ${{ matrix.target }}
          BUILD_TOOLCHAIN: ${{ matrix.toolchain }}
          # LIBSQLITE3_FLAGS: SQLITE_DEBUG SQLITE_MEMDEBUG
        run: sh ./build.sh

      - name: Upload library artifacts
        uses: actions/upload-artifact@v2
        with:
          name: library-${{ runner.os }}
          path: target/release/${{ matrix.lib }}

  build-py:
    name: Build Python packages
    needs: [build-manylinux, build-native]

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-11, windows-latest]
        python-version: [3.7]
        include:
          - os: ubuntu-latest
            plat-name: manylinux2014_x86_64
          - os: macos-11
            plat-name: macosx_10_9_universal2 # macosx_10_9_x86_64
          - os: windows-latest
            plat-name: win_amd64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine auditwheel
      - name: Fetch library artifacts
        uses: actions/download-artifact@v2
        with:
          name: library-${{ runner.os }}
          path: wrappers/python/aries_askar/

      - if: "runner.os == 'Linux'"
        name: Start postgres (Linux)
        run: |
          sudo systemctl start postgresql.service
          pg_isready
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres'"
          echo "POSTGRES_URL=postgres://postgres:postgres@localhost:5432/test-db" >> $GITHUB_ENV
      - name: Build package
        shell: sh
        run: |
          python setup.py bdist_wheel --python-tag=py3 --plat-name=${{ matrix.plat-name }}
        working-directory: wrappers/python

      - if: "runner.os == 'Linux'"
        name: Audit wheel
        run: auditwheel show wrappers/python/dist/*

      - name: Test package
        shell: sh
        run: |
          pip install pytest pytest-asyncio dist/*
          echo "-- Test SQLite in-memory --"
          python -m pytest --log-cli-level=WARNING -k "not contention"
          echo "-- Test SQLite file DB --"
          TEST_STORE_URI=sqlite://test.db python -m pytest --log-cli-level=WARNING -k "not contention"
          if [ -n "$POSTGRES_URL" ]; then
            echo "-- Test Postgres DB --"
            TEST_STORE_URI="$POSTGRES_URL" python -m pytest --log-cli-level=WARNING -k "not contention"
          fi
        working-directory: wrappers/python
        env:
          no_proxy: "*" # python issue 30385
          RUST_BACKTRACE: full
          # RUST_LOG: debug

      - name: Upload python package
        uses: actions/upload-artifact@v2
        with:
          name: python-${{ runner.os }}
          path: wrappers/python/dist/*

      - if: |
          github.event_name == 'release' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-wrappers == 'true')
        name: Publish python package
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload --skip-existing dist/*
        working-directory: wrappers/python

  build-javascript:
    name: Build and Test JavaScript wrapper
    needs: [build-manylinux]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: wrappers/javascript

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.JS 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Fetch library artifacts
        uses: actions/download-artifact@v2
        with:
          name: library-${{ runner.os }}

      - name: Install dependencies
        run: yarn install

      - name: Build JavaScript Wrapper
        run: yarn build

      - name: Lint JavaScript Wrapper
        run: yarn lint

      - name: Format Check JavaScript Wrapper
        run: yarn check-format

      - name: Type Check JavaScript Wrapper
        run: yarn check-types

      - name: Test JavaScript Wrapper
        env:
          # binary is downloaded to root of repository
          LIB_ARIES_ASKAR_PATH: ../../../
        run: yarn test

      - name: Set NPM config
        if: |
          github.event_name == 'release' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-wrappers == 'true')
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc
          echo "registry=https://registry.npmjs.org/" >> .npmrc
          echo "always-auth=true" >> .npmrc
      # TODO: this will currently publish the version as defined in the package.json. If the version already
      # exists on NPM it will skip the publishing. This means if a new version is released, but the version hasn't been
      # updated in the package.json files yet, it won't publish to NPM (which is kinda nice). We should however add a check
      # to see if the JS version matches the release version (do we want to keep the js and rust version in sync?)
      - name: Publish JavaScript Wrapper
        if: |
          github.event_name == 'release' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-wrappers == 'true')
        run: npx lerna publish from-package --no-push --no-private --yes --no-git-tag-version
